*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: ZEMP_1..........................................*
FORM GET_DATA_ZEMP_1.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZEMPLOYEE1 WHERE
(VIM_WHERETAB) .
    CLEAR ZEMP_1 .
ZEMP_1-CLIENT =
ZEMPLOYEE1-CLIENT .
ZEMP_1-EMPID =
ZEMPLOYEE1-EMPID .
ZEMP_1-EMPFNAME =
ZEMPLOYEE1-EMPFNAME .
ZEMP_1-EMPLNAME =
ZEMPLOYEE1-EMPLNAME .
ZEMP_1-GENDER =
ZEMPLOYEE1-GENDER .
ZEMP_1-DOJ =
ZEMPLOYEE1-DOJ .
ZEMP_1-EMP_EDU =
ZEMPLOYEE1-EMP_EDU .
    SELECT SINGLE * FROM ZEDU WHERE
EDU = ZEMPLOYEE1-EMP_EDU .
    IF SY-SUBRC EQ 0.
ZEMP_1-EDU =
ZEDU-EDU .
    ENDIF.
<VIM_TOTAL_STRUC> = ZEMP_1.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZEMP_1 .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZEMP_1.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZEMP_1-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZEMPLOYEE1 WHERE
  EMPID = ZEMP_1-EMPID .
    IF SY-SUBRC = 0.
    DELETE ZEMPLOYEE1 .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZEMPLOYEE1 WHERE
  EMPID = ZEMP_1-EMPID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZEMPLOYEE1.
    ENDIF.
ZEMPLOYEE1-CLIENT =
ZEMP_1-CLIENT .
ZEMPLOYEE1-EMPID =
ZEMP_1-EMPID .
ZEMPLOYEE1-EMPFNAME =
ZEMP_1-EMPFNAME .
ZEMPLOYEE1-EMPLNAME =
ZEMP_1-EMPLNAME .
ZEMPLOYEE1-GENDER =
ZEMP_1-GENDER .
ZEMPLOYEE1-DOJ =
ZEMP_1-DOJ .
ZEMPLOYEE1-EMP_EDU =
ZEMP_1-EMP_EDU .
    IF SY-SUBRC = 0.
    UPDATE ZEMPLOYEE1 ##WARN_OK.
    ELSE.
    INSERT ZEMPLOYEE1 .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZEMP_1-UPD_FLAG,
STATUS_ZEMP_1-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZEMP_1.
  SELECT SINGLE * FROM ZEMPLOYEE1 WHERE
EMPID = ZEMP_1-EMPID .
ZEMP_1-CLIENT =
ZEMPLOYEE1-CLIENT .
ZEMP_1-EMPID =
ZEMPLOYEE1-EMPID .
ZEMP_1-EMPFNAME =
ZEMPLOYEE1-EMPFNAME .
ZEMP_1-EMPLNAME =
ZEMPLOYEE1-EMPLNAME .
ZEMP_1-GENDER =
ZEMPLOYEE1-GENDER .
ZEMP_1-DOJ =
ZEMPLOYEE1-DOJ .
ZEMP_1-EMP_EDU =
ZEMPLOYEE1-EMP_EDU .
    SELECT SINGLE * FROM ZEDU WHERE
EDU = ZEMPLOYEE1-EMP_EDU .
    IF SY-SUBRC EQ 0.
ZEMP_1-EDU =
ZEDU-EDU .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZEMP_1-EDU .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZEMP_1 USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZEMP_1-EMPID TO
ZEMPLOYEE1-EMPID .
MOVE ZEMP_1-CLIENT TO
ZEMPLOYEE1-CLIENT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZEMPLOYEE1'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZEMPLOYEE1 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZEMPLOYEE1'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZEMP_1 USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZEMPLOYEE1-CLIENT =
ZEMP_1-CLIENT .
ZEMPLOYEE1-EMPID =
ZEMP_1-EMPID .
ZEMPLOYEE1-EMPFNAME =
ZEMP_1-EMPFNAME .
ZEMPLOYEE1-EMPLNAME =
ZEMP_1-EMPLNAME .
ZEMPLOYEE1-GENDER =
ZEMP_1-GENDER .
ZEMPLOYEE1-DOJ =
ZEMP_1-DOJ .
ZEMPLOYEE1-EMP_EDU =
ZEMP_1-EMP_EDU .
    SELECT SINGLE * FROM ZEDU WHERE
EDU = ZEMPLOYEE1-EMP_EDU .
    IF SY-SUBRC EQ 0.
ZEMP_1-EDU =
ZEDU-EDU .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZEMP_1-EDU .
    ENDIF.
ENDFORM.
